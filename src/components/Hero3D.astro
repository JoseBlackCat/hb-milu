---
import ScrollIndicator from './ScrollIndicator.astro';
---
<div id="hero-container" class="w-full h-[100svh] relative overflow-hidden">
  <canvas id="hero-canvas" class="absolute top-0 left-0 w-full h-full"></canvas>
  <div class="absolute inset-0 bg-gradient-to-b from-black/30 via-transparent to-black/20"></div>
  
  <!-- Floating hearts background -->
  <div class="absolute inset-0 pointer-events-none">
    {Array.from({ length: 20 }).map((_, i) => (
      <div class={`absolute animate-float-${i % 5} text-k-pink opacity-20 text-4xl`}
           style={{
             left: `${Math.random() * 100}%`,
             top: `${Math.random() * 100}%`,
             animationDelay: `${Math.random() * 5}s`
           }}>
        ‚ô•
      </div>
    ))}
  </div>

  <div class="absolute inset-0 flex items-center justify-center text-center z-10 px-4">
    <div class="transform transition-transform duration-700 hover:scale-105">
      <h1 class="text-4xl sm:text-5xl md:text-6xl lg:text-8xl font-bold text-k-pink mb-4 font-noto-kr hero-title animate-title">
        ¬°Feliz Cumplea√±os Milu!
      </h1>
      <p class="text-xl sm:text-2xl md:text-3xl text-k-blue font-noto-kr mt-6 hero-subtitle animate-subtitle">
        ÏÑ∏Í≥Ñ ÏµúÍ≥†Ïùò Í∞ÑÌò∏ÏÇ¨
      </p>
      <div class="mt-8 flex justify-center space-x-4 animate-fade-in">
        <span class="text-4xl sm:text-5xl animate-bounce-slow">üíù</span>
        <span class="text-4xl sm:text-5xl animate-bounce-slow" style="animation-delay: 0.2s">üíÆ</span>
        <span class="text-4xl sm:text-5xl animate-bounce-slow" style="animation-delay: 0.4s">ü©∫</span>
      </div>
    </div>
  </div>
  <ScrollIndicator />
</div>

<style>
  .hero-title {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5),
                 -2px -2px 4px rgba(0, 0, 0, 0.5);
  }
  
  .hero-subtitle {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5),
                 -1px -1px 2px rgba(0, 0, 0, 0.5);
  }

  @keyframes float-0 { 0%, 100% { transform: translate(0, 0); } 50% { transform: translate(20px, -20px); } }
  @keyframes float-1 { 0%, 100% { transform: translate(0, 0); } 50% { transform: translate(-15px, -25px); } }
  @keyframes float-2 { 0%, 100% { transform: translate(0, 0); } 50% { transform: translate(15px, -15px); } }
  @keyframes float-3 { 0%, 100% { transform: translate(0, 0); } 50% { transform: translate(-20px, -10px); } }
  @keyframes float-4 { 0%, 100% { transform: translate(0, 0); } 50% { transform: translate(10px, -30px); } }

  .animate-float-0 { animation: float-0 6s ease-in-out infinite; }
  .animate-float-1 { animation: float-1 7s ease-in-out infinite; }
  .animate-float-2 { animation: float-2 8s ease-in-out infinite; }
  .animate-float-3 { animation: float-3 9s ease-in-out infinite; }
  .animate-float-4 { animation: float-4 10s ease-in-out infinite; }

  .animate-title {
    animation: fadeInDown 1.5s ease-out;
  }

  .animate-subtitle {
    animation: fadeInUp 1.5s ease-out 0.5s both;
  }

  .animate-fade-in {
    animation: fadeIn 2s ease-out 1s both;
  }

  .animate-bounce-slow {
    animation: bounce 2s infinite;
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
</style>

<script>
  import { Scene3D } from '../lib/three/scene';

  let scene: Scene3D | null = null;

  // Initialize scene when the component mounts
  const canvas = document.querySelector('#hero-canvas') as HTMLCanvasElement;
  if (canvas) {
    scene = new Scene3D(canvas);
    scene.animate();
  }

  // Cleanup when the component unmounts
  document.addEventListener('astro:before-swap', () => {
    if (scene) {
      scene.dispose();
      scene = null;
    }
  });
</script>